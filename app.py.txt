import streamlit as st
import os
import random
from mutagen import File
from mutagen.mp4 import MP4
from mutagen.asf import ASF

# Sample metadata pools
TITLES = ["Sunset Dreams", "Midnight Journey", "Ocean Waves", "Mountain Echo", "Urban Lights"]
ARTISTS = ["Alex Rivers", "Sam Phoenix", "Jordan Blake", "Casey Storm", "Morgan Reed"]
ALBUMS = ["Horizons", "Reflections", "Euphoria", "Chronicles", "Odyssey"]
GENRES = ["Electronic", "Rock", "Pop", "Hip-Hop", "Classical"]
COMMENTS = ["Generated by Random Metadata Injector", "AI-generated content"]

def generate_random_metadata():
    return {
        "title": random.choice(TITLES),
        "artist": random.choice(ARTISTS),
        "album": random.choice(ALBUMS),
        "year": str(random.randint(1990, 2023)),
        "comment": random.choice(COMMENTS),
        "genre": random.choice(GENRES),
        "track": str(random.randint(1, 20))
    }

def inject_metadata(file_path):
    metadata = generate_random_metadata()
    file_ext = os.path.splitext(file_path)[1].lower()
    
    try:
        # Use universal File handler for most formats
        if file_ext not in (".mp4", ".asf", ".wmv"):
            audio_file = File(file_path, easy=True)
            if audio_file:
                audio_file['title'] = metadata["title"]
                audio_file['artist'] = metadata["artist"]
                audio_file['album'] = metadata["album"]
                audio_file['date'] = metadata["year"]
                audio_file['comment'] = metadata["comment"]
                audio_file['genre'] = metadata["genre"]
                audio_file['tracknumber'] = metadata["track"]
                audio_file.save()
                return metadata
        
        # Format-specific handling
        if file_ext == ".mp4":
            audio_file = MP4(file_path)
            audio_file["\xa9nam"] = metadata["title"]
            audio_file["\xa9ART"] = metadata["artist"]
            audio_file["\xa9alb"] = metadata["album"]
            audio_file["\xa9day"] = metadata["year"]
            audio_file["\xa9cmt"] = metadata["comment"]
            audio_file["\xa9gen"] = metadata["genre"]
            audio_file["trkn"] = [(int(metadata["track"]), 20)]
            audio_file.save()
            return metadata
            
        elif file_ext in (".wmv", ".asf"):
            audio_file = ASF(file_path)
            audio_file["Title"] = metadata["title"]
            audio_file["Author"] = metadata["artist"]
            audio_file["WM/AlbumTitle"] = metadata["album"]
            audio_file["WM/Year"] = metadata["year"]
            audio_file["Description"] = metadata["comment"]
            audio_file["WM/Genre"] = metadata["genre"]
            audio_file["WM/TrackNumber"] = int(metadata["track"])
            audio_file.save()
            return metadata
            
        else:
            st.error(f"Unsupported format: {file_ext}")
            return None
            
    except Exception as e:
        st.error(f"Error: {str(e)}")
        return None

st.title("ðŸŽ¬ Random Video Metadata Injector")
st.write("Upload a video file to inject random metadata.")

uploaded_file = st.file_uploader("Choose a video file", type=["mp4", "mkv", "wmv", "asf"])

if uploaded_file is not None:
    # Save the uploaded file temporarily
    temp_path = os.path.join("temp", uploaded_file.name)
    os.makedirs("temp", exist_ok=True)
    with open(temp_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    # Inject metadata
    metadata = inject_metadata(temp_path)
    
    if metadata:
        st.success("âœ… Metadata injected successfully!")
        st.write("New metadata:")
        for key, value in metadata.items():
            st.write(f"  {key.capitalize()}: {value}")
        
        # Provide download button
        with open(temp_path, "rb") as f:
            st.download_button(
                label="ðŸ’¾ Download processed video",
                data=f,
                file_name=f"processed_{uploaded_file.name}",
                mime="video/mp4"
            )